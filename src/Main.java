import com.felixullmann.graphs.IntegerGraph;
import com.felixullmann.graphs.Set;

import java.util.Arrays;


/*
    USED DATASETS
    https://networkrepository.com/dimacs.php
 */
public class Main {
    public static void main(String[] args) {

        IntegerGraph myGraph = null;

        try {
            myGraph = IntegerGraph.fromVehicleRoutingApplication(args[0]);
        } catch (IndexOutOfBoundsException e) {
            System.out.println("Please provide a path to the problem file.");
            System.exit(1);
        }



        Set<Integer> initialCover = (Set<Integer>) myGraph.vertices.clone();
        initialCover = new Set<>(Arrays.asList(2, 3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 18, 21, 22, 25, 26, 27, 29, 30, 31, 32, 33, 38, 39, 40, 41, 42, 45, 46, 47, 48, 50, 51, 52, 54, 55, 56, 59, 60, 62, 63, 64, 65, 66, 67, 68, 71, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 95, 96, 97, 100, 101, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 182, 183, 185, 186, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 203, 205, 207, 208, 209, 210, 212, 213, 214, 216, 217, 218, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 249, 250, 251, 252, 253, 255, 256, 260, 261, 262, 263, 264, 266, 267, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 287, 288, 290, 291, 292, 294, 296, 297, 298, 300, 303, 304, 307, 308, 310, 311, 312, 314, 315, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 331, 332, 335, 337, 338, 340, 341, 342, 343, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 369, 370, 371, 372, 373, 375, 377, 378, 380, 381, 382, 383, 384, 385, 387, 388, 389, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 460, 461, 462, 463, 464, 466, 468, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 482, 483, 485, 486, 489, 492, 493, 494, 495, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 514, 515, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 539, 540, 541, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 563, 565, 566, 567, 572, 573, 575, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 595, 597, 598, 600, 602, 604, 605, 606, 607, 610, 614, 616, 618, 620, 621, 622, 623, 625, 626, 631, 633, 634, 635, 636, 637, 638, 639, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 656, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 670, 673, 674, 678, 680, 681, 682, 684, 686, 687, 688, 690, 691, 692, 695, 696, 697, 698, 699, 700, 701, 702, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 724, 727, 728, 729, 731, 733, 734, 735, 737, 738, 739, 741, 742, 743, 744, 745, 747, 748, 750, 753, 754, 756, 757, 760, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 776, 777, 779, 780, 781, 783, 784, 785, 786, 787, 788, 791, 793, 794, 795, 796, 798, 799, 801, 802, 803, 804, 808, 809, 810, 811, 813, 814, 815, 816, 818, 819, 821, 822, 823, 824, 825, 827, 828, 829, 831, 835, 838, 839, 842, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 859, 861, 863, 864, 865, 867, 868, 869, 871, 873, 874, 877, 878, 880, 885, 886, 887, 888, 889, 891, 892, 894, 895, 897, 899, 900, 902, 903, 904, 905, 906, 907, 909, 910, 911, 913, 914, 916, 917, 918, 922, 924, 925, 927, 928, 929, 931, 932, 934, 935, 936, 937, 939, 940, 941, 942, 943, 945, 946, 948, 949, 950, 951, 954, 955, 956, 957, 959, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 975, 976, 977, 978, 979));

        System.out.println("Initial solution");
        System.out.println(String.format("Is cover: %s",myGraph.isVertexCover(initialCover)));
        System.out.println(String.format("Weight: %d", myGraph.getSetWeight(initialCover)));
        System.out.println();


        // Calculate minimum vertex cover and measure time
        long start = System.currentTimeMillis();
        Set<Integer> minCover = myGraph.mvc_localsearch(initialCover, myGraph.vertices.size());

        System.out.println("Took " + ((System.currentTimeMillis()-start)/1000.0) +  " seconds to calculate minimum vertex cover.");
        System.out.println(String.format("Is cover: %s",myGraph.isVertexCover(minCover)));
        System.out.println(String.format("Weight: %d", myGraph.getSetWeight(minCover)));
        System.out.println("Cover nodes:");
        System.out.println(minCover);


        /*
        System.out.println("Removing 8 manually");
        minCover.remove(8);

        System.out.println(String.format("Is cover: %s",myGraph.isVertexCover(minCover)));
        System.out.println(String.format("Weight: %d", myGraph.getSetWeight(minCover)));
        System.out.println("Cover nodes:");
        System.out.println(minCover);
        */

    }
}
